import express from 'express';
import path from 'path';
import fs from 'fs/promises';
import { HtmlReporter } from '../../../src/reporters/html';
import { ExcelReporter } from '../../../src/reporters/excel';
import { JsonReporter } from '../../../src/reporters/json';
import { Logger } from '../../../src/utils/logger';

// Ëøô‰∫õÊúçÂä°ÈúÄË¶ÅÂú®Ë∑ØÁî±ÂàùÂßãÂåñÊó∂Ê≥®ÂÖ•ÔºåÈÅøÂÖçÂæ™ÁéØ‰æùËµñ
let comparisonService: any;

const router = express.Router();

// ÂàùÂßãÂåñÊúçÂä°ÁöÑÂáΩÊï∞ÔºåÁî±‰∏ªÂ∫îÁî®Ë∞ÉÁî®
export const initializeServices = (comparisonSvc: any) => {
  comparisonService = comparisonSvc;
};

const logger = new Logger('info', path.join(__dirname, '../../../logs/web-server.log'));

// Êä•ÂëäÊñá‰ª∂Â≠òÂÇ®ÁõÆÂΩï - ‰ºòÂÖà‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèÔºåÂê¶Âàô‰ΩøÁî®WebÊúçÂä°Ê†πÁõÆÂΩï‰∏ãÁöÑreports
const REPORTS_DIR = process.env.REPORTS_DIR || path.join(__dirname, '../../reports');
console.log(`üìÅ [Ë∑ØÂæÑÊ£ÄÊü•] REPORTS_DIR = ${REPORTS_DIR}`);
console.log(`üìÅ [Ë∑ØÂæÑÊ£ÄÊü•] __dirname = ${__dirname}`);

// Á°Æ‰øùÊä•ÂëäÁõÆÂΩïÂ≠òÂú®
const ensureReportsDir = async () => {
  try {
    await fs.access(REPORTS_DIR);
  } catch {
    await fs.mkdir(REPORTS_DIR, { recursive: true });
  }
};

// ÁîüÊàêÊä•Âëä
router.post('/generate/:taskId', async (req, res) => {
  try {
    const { taskId } = req.params;
    const { format = 'html', options = {} } = req.body;
    
    console.log(`üìã [Êä•ÂëäÁîüÊàê] ÂºÄÂßãÂ§ÑÁêÜËØ∑Ê±Ç - ‰ªªÂä°ID: ${taskId}, Ê†ºÂºè: ${format}`);
    
    if (!taskId) {
      return res.status(400).json({
        success: false,
        error: '‰ªªÂä°ID‰∏çËÉΩ‰∏∫Á©∫'
      });
    }

    const result = comparisonService.getTaskResult(taskId);
    
    if (!result) {
      console.log(`‚ùå [Êä•ÂëäÁîüÊàê] ‰ªªÂä°ÁªìÊûú‰∏çÂ≠òÂú®: ${taskId}`);
      return res.status(404).json({
        success: false,
        error: '‰ªªÂä°ÁªìÊûú‰∏çÂ≠òÂú®Êàñ‰ªªÂä°Â∞öÊú™ÂÆåÊàê'
      });
    }

    console.log(`‚úÖ [Êä•ÂëäÁîüÊàê] ÊâæÂà∞‰ªªÂä°ÁªìÊûúÔºåÂºÄÂßãÁîüÊàê${format.toUpperCase()}Êä•Âëä`);
    await ensureReportsDir();

    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const baseFileName = `comparison-${taskId}-${timestamp}`;
    
    let reporter;
    let expectedFileName;
    let mimeType;

    switch (format.toLowerCase()) {
      case 'html':
        reporter = new HtmlReporter(logger);
        expectedFileName = `${baseFileName}.html`;
        mimeType = 'text/html';
        break;
      case 'excel':
        reporter = new ExcelReporter(logger);
        expectedFileName = `${baseFileName}.xlsx`;
        mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        break;
      case 'json':
        reporter = new JsonReporter(logger);
        expectedFileName = `${baseFileName}.json`;
        mimeType = 'application/json';
        break;
      default:
        return res.status(400).json({
          success: false,
          error: '‰∏çÊîØÊåÅÁöÑÊä•ÂëäÊ†ºÂºè„ÄÇÊîØÊåÅÁöÑÊ†ºÂºè: html, excel, json'
        });
    }

    const expectedFilePath = path.join(REPORTS_DIR, expectedFileName);
    console.log(`üìÅ [Êä•ÂëäÁîüÊàê] È¢ÑÊúüÊñá‰ª∂Ë∑ØÂæÑ: ${expectedFilePath}`);
    
    // ÁîüÊàêÊä•Âëä - ‰ΩøÁî®ReporterËøîÂõûÁöÑÂÆûÈôÖÊñá‰ª∂Ë∑ØÂæÑ
    let actualFilePath;
    try {
      actualFilePath = await reporter.generateReport(result, expectedFilePath);
      console.log(`‚úÖ [Êä•ÂëäÁîüÊàê] ReporterËøîÂõûÁöÑÂÆûÈôÖÊñá‰ª∂Ë∑ØÂæÑ: ${actualFilePath}`);
    } catch (reporterError: any) {
      console.error(`‚ùå [Êä•ÂëäÁîüÊàê] ReporterÁîüÊàêÂ§±Ë¥•:`, reporterError);
      throw new Error(`Êä•ÂëäÁîüÊàêÂ§±Ë¥•: ${reporterError.message}`);
    }

    // Ê£ÄÊü•ÂÆûÈôÖÁîüÊàêÁöÑÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
    let finalFilePath = actualFilePath || expectedFilePath;
    try {
      await fs.access(finalFilePath);
      console.log(`‚úÖ [Êä•ÂëäÁîüÊàê] Êñá‰ª∂Â≠òÂú®Á°ÆËÆ§: ${finalFilePath}`);
    } catch (accessError) {
      console.error(`‚ùå [Êä•ÂëäÁîüÊàê] Êñá‰ª∂‰∏çÂ≠òÂú®: ${finalFilePath}`, accessError);
      
      // Â∞ùËØïÊ£ÄÊü•È¢ÑÊúüË∑ØÂæÑ
      try {
        await fs.access(expectedFilePath);
        finalFilePath = expectedFilePath;
        console.log(`‚úÖ [Êä•ÂëäÁîüÊàê] ‰ΩøÁî®È¢ÑÊúüË∑ØÂæÑ: ${expectedFilePath}`);
      } catch {
        throw new Error(`Êä•ÂëäÊñá‰ª∂ÁîüÊàêÂ§±Ë¥•ÔºåÊñá‰ª∂‰∏çÂ≠òÂú®: ${finalFilePath}`);
      }
    }

    // Ëé∑ÂèñÊñá‰ª∂Â§ßÂ∞èÂíåÊúÄÁªàÊñá‰ª∂Âêç
    const stats = await fs.stat(finalFilePath);
    const actualFileName = path.basename(finalFilePath);
    
    console.log(`‚úÖ [Êä•ÂëäÁîüÊàê] Êä•ÂëäÁîüÊàêÊàêÂäü - Êñá‰ª∂: ${actualFileName}, Â§ßÂ∞è: ${stats.size} bytes`);

    res.json({
      success: true,
      report: {
        taskId,
        format,
        fileName: actualFileName,
        filePath: `/reports/${actualFileName}`,
        downloadUrl: `http://localhost:${process.env.PORT || 3001}/reports/${actualFileName}`,
        size: stats.size,
        createdAt: new Date().toISOString(),
        mimeType
      }
    });

  } catch (error: any) {
    console.error('‚ùå [Êä•ÂëäÁîüÊàê] ÁîüÊàêÊä•ÂëäÂ§±Ë¥•:', error);
    console.error('‚ùå [Êä•ÂëäÁîüÊàê] ÈîôËØØÂ†ÜÊ†à:', error.stack);
    res.status(500).json({
      success: false,
      error: 'ÁîüÊàêÊä•ÂëäÂ§±Ë¥•',
      details: error.message
    });
  }
});

// Ëé∑ÂèñÊâÄÊúâÂèØÁî®Êä•ÂëäÂàóË°®
router.get('/list', async (req, res) => {
  try {
    console.log(`üìã [Êä•ÂëäÂàóË°®] Êî∂Âà∞Ëé∑ÂèñÊä•ÂëäÂàóË°®ËØ∑Ê±Ç`);
    console.log(`üìÅ [Êä•ÂëäÂàóË°®] Êä•ÂëäÁõÆÂΩï: ${REPORTS_DIR}`);
    
    await ensureReportsDir();
    
    const files = await fs.readdir(REPORTS_DIR);
    console.log(`üìÇ [Êä•ÂëäÂàóË°®] Êâ´ÊèèÂà∞ ${files.length} ‰∏™Êñá‰ª∂:`, files);
    
    const reports = [];
    
    // Ëé∑ÂèñÂΩìÂâçËØ∑Ê±ÇÁöÑ‰∏ªÊú∫‰ø°ÊÅØÔºåÁî®‰∫éÁîüÊàêÂÆåÊï¥ÁöÑ‰∏ãËΩΩÈìæÊé•
    const protocol = req.protocol;
    const host = req.get('host');
    const baseUrl = `${protocol}://${host}`;
    console.log(`üåê [Êä•ÂëäÂàóË°®] Âü∫Á°ÄURL: ${baseUrl}`);

    for (const file of files) {
      const filePath = path.join(REPORTS_DIR, file);
      const stats = await fs.stat(filePath);
      
      if (stats.isFile()) {
        const ext = path.extname(file).toLowerCase();
        let format = 'unknown';
        let mimeType = 'application/octet-stream';

        switch (ext) {
          case '.html':
            format = 'html';
            mimeType = 'text/html';
            break;
          case '.xlsx':
            format = 'excel';
            mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
            break;
          case '.json':
            format = 'json';
            mimeType = 'application/json';
            break;
        }

        // Â∞ùËØï‰ªéÊñá‰ª∂ÂêçÊèêÂèñ‰ªªÂä°ID - ÊîØÊåÅÊñ∞Êóß‰∏§ÁßçÊ†ºÂºè
        // Êñ∞Ê†ºÂºè: comparison-{taskId}-{timestamp}.ext
        // ÊóßÊ†ºÂºè: database-comparison_{timestamp}.ext (Êó†taskId)
        let taskId = null;
        const newFormatMatch = file.match(/comparison-([a-f0-9-]{36})-/);
        if (newFormatMatch) {
          taskId = newFormatMatch[1];
        }
        // Â¶ÇÊûúÊòØÊóßÊ†ºÂºèÊñá‰ª∂ÔºåtaskId‰øùÊåÅ‰∏∫null

        reports.push({
          fileName: file,
          format,
          taskId,
          size: stats.size,
          createdAt: stats.ctime.toISOString(),
          modifiedAt: stats.mtime.toISOString(),
          downloadUrl: `${baseUrl}/reports/${encodeURIComponent(file)}`,
          viewUrl: `${baseUrl}/reports/${encodeURIComponent(file)}`,
          mimeType
        });
      }
    }

    // Êåâ‰øÆÊîπÊó∂Èó¥ÈôçÂ∫èÊéíÂàó
    reports.sort((a, b) => new Date(b.modifiedAt).getTime() - new Date(a.modifiedAt).getTime());

    console.log(`‚úÖ [Êä•ÂëäÂàóË°®] ÊàêÂäüÂ§ÑÁêÜ ${reports.length} ‰∏™Êä•ÂëäÊñá‰ª∂`);
    console.log(`üìÑ [Êä•ÂëäÂàóË°®] Êä•ÂëäËØ¶ÊÉÖ:`, reports.map(r => ({
      fileName: r.fileName,
      format: r.format,
      size: r.size,
      taskId: r.taskId
    })));

    res.json({
      success: true,
      reports,
      count: reports.length
    });

  } catch (error: any) {
    console.error('Ëé∑ÂèñÊä•ÂëäÂàóË°®Â§±Ë¥•:', error);
    res.status(500).json({
      success: false,
      error: 'Ëé∑ÂèñÊä•ÂëäÂàóË°®Â§±Ë¥•',
      details: error.message
    });
  }
});

// Ëé∑ÂèñÁâπÂÆöÊä•Âëä‰ø°ÊÅØ
router.get('/info/:fileName', async (req, res) => {
  try {
    const { fileName } = req.params;
    
    if (!fileName) {
      return res.status(400).json({
        success: false,
        error: 'Êñá‰ª∂Âêç‰∏çËÉΩ‰∏∫Á©∫'
      });
    }

    const filePath = path.join(REPORTS_DIR, fileName);
    
    try {
      const stats = await fs.stat(filePath);
      
      if (!stats.isFile()) {
        return res.status(404).json({
          success: false,
          error: 'Êñá‰ª∂‰∏çÂ≠òÂú®'
        });
      }

      const ext = path.extname(fileName).toLowerCase();
      let format = 'unknown';
      let mimeType = 'application/octet-stream';

      switch (ext) {
        case '.html':
          format = 'html';
          mimeType = 'text/html';
          break;
        case '.xlsx':
          format = 'excel';
          mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
          break;
        case '.json':
          format = 'json';
          mimeType = 'application/json';
          break;
      }

      const taskIdMatch = fileName.match(/comparison-([a-f0-9-]+)-/);
      const taskId = taskIdMatch ? taskIdMatch[1] : null;

      res.json({
        success: true,
        report: {
          fileName,
          format,
          taskId,
          size: stats.size,
          createdAt: stats.ctime.toISOString(),
          modifiedAt: stats.mtime.toISOString(),
          downloadUrl: `http://localhost:${process.env.PORT || 3001}/reports/${fileName}`,
          mimeType
        }
      });

    } catch {
      return res.status(404).json({
        success: false,
        error: 'Êñá‰ª∂‰∏çÂ≠òÂú®'
      });
    }

  } catch (error: any) {
    console.error('Ëé∑ÂèñÊä•Âëä‰ø°ÊÅØÂ§±Ë¥•:', error);
    res.status(500).json({
      success: false,
      error: 'Ëé∑ÂèñÊä•Âëä‰ø°ÊÅØÂ§±Ë¥•',
      details: error.message
    });
  }
});

// Âà†Èô§Êä•ÂëäÊñá‰ª∂
router.delete('/:fileName', async (req, res) => {
  try {
    const { fileName } = req.params;
    
    if (!fileName) {
      return res.status(400).json({
        success: false,
        error: 'Êñá‰ª∂Âêç‰∏çËÉΩ‰∏∫Á©∫'
      });
    }

    const filePath = path.join(REPORTS_DIR, fileName);
    
    try {
      await fs.access(filePath);
      await fs.unlink(filePath);
      
      res.json({
        success: true,
        message: 'Êä•ÂëäÊñá‰ª∂Âà†Èô§ÊàêÂäü'
      });

    } catch {
      return res.status(404).json({
        success: false,
        error: 'Êñá‰ª∂‰∏çÂ≠òÂú®'
      });
    }

  } catch (error: any) {
    console.error('Âà†Èô§Êä•ÂëäÊñá‰ª∂Â§±Ë¥•:', error);
    res.status(500).json({
      success: false,
      error: 'Âà†Èô§Êä•ÂëäÊñá‰ª∂Â§±Ë¥•',
      details: error.message
    });
  }
});

// ÊâπÈáèÂà†Èô§ËøáÊúüÊä•ÂëäÔºàË∂ÖËøáÊåáÂÆöÂ§©Êï∞Ôºâ
router.delete('/cleanup/:days', async (req, res) => {
  try {
    const { days } = req.params;
    const daysNum = parseInt(days);
    
    if (isNaN(daysNum) || daysNum < 1) {
      return res.status(400).json({
        success: false,
        error: 'Â§©Êï∞ÂøÖÈ°ªÊòØÂ§ß‰∫é0ÁöÑÊï¥Êï∞'
      });
    }

    await ensureReportsDir();
    
    const files = await fs.readdir(REPORTS_DIR);
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysNum);
    
    let deletedCount = 0;

    for (const file of files) {
      const filePath = path.join(REPORTS_DIR, file);
      const stats = await fs.stat(filePath);
      
      if (stats.isFile() && stats.mtime < cutoffDate) {
        try {
          await fs.unlink(filePath);
          deletedCount++;
        } catch (error) {
          console.error(`Âà†Èô§Êñá‰ª∂ ${file} Â§±Ë¥•:`, error);
        }
      }
    }

    res.json({
      success: true,
      message: `Ê∏ÖÁêÜÂÆåÊàêÔºåÂà†Èô§‰∫Ü ${deletedCount} ‰∏™ËøáÊúüÊä•ÂëäÊñá‰ª∂`,
      deletedCount
    });

  } catch (error: any) {
    console.error('Ê∏ÖÁêÜÊä•ÂëäÊñá‰ª∂Â§±Ë¥•:', error);
    res.status(500).json({
      success: false,
      error: 'Ê∏ÖÁêÜÊä•ÂëäÊñá‰ª∂Â§±Ë¥•',
      details: error.message
    });
  }
});

export default router;